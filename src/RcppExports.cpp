// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _phyr_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// predict_cpp
NumericVector predict_cpp(int n, const arma::vec& nsr, int reps, const arma::mat& V);
RcppExport SEXP _phyr_predict_cpp(SEXP nSEXP, SEXP nsrSEXP, SEXP repsSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nsr(nsrSEXP);
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_cpp(n, nsr, reps, V));
    return rcpp_result_gen;
END_RCPP
}
// pcd2_loop
List pcd2_loop(arma::vec SSii, arma::vec nsr, double SCii, const arma::mat& comm, const arma::mat& V, int nsp_pool, bool verbose);
RcppExport SEXP _phyr_pcd2_loop(SEXP SSiiSEXP, SEXP nsrSEXP, SEXP SCiiSEXP, SEXP commSEXP, SEXP VSEXP, SEXP nsp_poolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type SSii(SSiiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nsr(nsrSEXP);
    Rcpp::traits::input_parameter< double >::type SCii(SCiiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type comm(commSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type nsp_pool(nsp_poolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pcd2_loop(SSii, nsr, SCii, comm, V, nsp_pool, verbose));
    return rcpp_result_gen;
END_RCPP
}
// pglmm_gaussian_LL_cpp
double pglmm_gaussian_LL_cpp(NumericVector par, const arma::mat& X, const arma::vec& Y, const arma::sp_mat& Zt, const arma::sp_mat& St, const List& nested, bool REML, bool verbose);
RcppExport SEXP _phyr_pglmm_gaussian_LL_cpp(SEXP parSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZtSEXP, SEXP StSEXP, SEXP nestedSEXP, SEXP REMLSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Zt(ZtSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type St(StSEXP);
    Rcpp::traits::input_parameter< const List& >::type nested(nestedSEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pglmm_gaussian_LL_cpp(par, X, Y, Zt, St, nested, REML, verbose));
    return rcpp_result_gen;
END_RCPP
}
// pglmm_gaussian_LL_calc_cpp
List pglmm_gaussian_LL_calc_cpp(NumericVector par, const arma::mat& X, const arma::vec& Y, const arma::sp_mat& Zt, const arma::sp_mat& St, const List& nested, bool REML);
RcppExport SEXP _phyr_pglmm_gaussian_LL_calc_cpp(SEXP parSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZtSEXP, SEXP StSEXP, SEXP nestedSEXP, SEXP REMLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Zt(ZtSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type St(StSEXP);
    Rcpp::traits::input_parameter< const List& >::type nested(nestedSEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    rcpp_result_gen = Rcpp::wrap(pglmm_gaussian_LL_calc_cpp(par, X, Y, Zt, St, nested, REML));
    return rcpp_result_gen;
END_RCPP
}
// plmm_binary_iV_logdetV_cpp
List plmm_binary_iV_logdetV_cpp(NumericVector par, arma::vec mu, const arma::sp_mat& Zt, const arma::sp_mat& St, const List& nested, bool logdet);
RcppExport SEXP _phyr_plmm_binary_iV_logdetV_cpp(SEXP parSEXP, SEXP muSEXP, SEXP ZtSEXP, SEXP StSEXP, SEXP nestedSEXP, SEXP logdetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Zt(ZtSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type St(StSEXP);
    Rcpp::traits::input_parameter< const List& >::type nested(nestedSEXP);
    Rcpp::traits::input_parameter< bool >::type logdet(logdetSEXP);
    rcpp_result_gen = Rcpp::wrap(plmm_binary_iV_logdetV_cpp(par, mu, Zt, St, nested, logdet));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phyr_set_seed", (DL_FUNC) &_phyr_set_seed, 1},
    {"_phyr_predict_cpp", (DL_FUNC) &_phyr_predict_cpp, 4},
    {"_phyr_pcd2_loop", (DL_FUNC) &_phyr_pcd2_loop, 7},
    {"_phyr_pglmm_gaussian_LL_cpp", (DL_FUNC) &_phyr_pglmm_gaussian_LL_cpp, 8},
    {"_phyr_pglmm_gaussian_LL_calc_cpp", (DL_FUNC) &_phyr_pglmm_gaussian_LL_calc_cpp, 7},
    {"_phyr_plmm_binary_iV_logdetV_cpp", (DL_FUNC) &_phyr_plmm_binary_iV_logdetV_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_phyr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
